/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layers
#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";

                adjust {
                        if-layers = <LOWER RAISE>;
                        then-layer = <ADJUST>;
                };
         };

        behaviors {
                hml: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS_LEFT";
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>;
                        quick-tap-ms = <125>;
                        // global-quick-tap;
                        // If set, pressing the hold-tap and then any key position NOT in the list triggers a tap.
                        // In other words, only valid for key positions below
                        hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
                }

                hmr: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS_RIGHT";
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>
                        quick-tap-ms = <125>;
                        // global-quick-tap;
                        // If set, pressing the hold-tap and then any key position NOT in the list triggers a tap.
                        // In other words, only valid for key positions below
                        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
                }

                http: hold_tap_tap_preferred {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD_TAP_TAP_PREFERRED";
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>
                        quick-tap-ms = <125>;
                }

                // ht: hold_tap {
                //         compatible = "zmk,behavior-hold-tap";
                //         label = "HOLD_TAP";
                //         #binding-cells = <2>;
                //         bindings = <&kp>, <&kp>;
                //         flavor = "tap-preferred";
                //         tapping-term-ms = <200>;
                //         quick-tap-ms = <125>;
                //         global-quick-tap;
                // };

                // sk_shft_td: sticky_shift_tap_dance {
                //         compatible = "zmk,behavior-tap-dance";
                //         label = "SHIFT_SHIFT_TAP_DANCE";
                //         #binding-cells = <0>;
                //         tapping-term-ms = <200>;
                //         bindings = <&sk LSHFT>, <&kp CAPS>;
                // };
        };

        keymap {
                compatible = "zmk,keymap";

                default {
                        bindings = <
                &none &kp     V    &kp    M    &kp    L    &kp     C    &kp     P               &kp      X     &kp         F       &kp        O      &kp    U    &kp     J    &none
                &none &hml LCTRL S &hml LALT T &hml LGUI R &hml LSHFT D &kp     Y               &kp     DOT    &hmr     RSHFT N    &hmr     RGUI A   &hmr RALT E &hmr RCTRL I &none
                &none &kp     Z    &kp    K    &kp    Q    &kp     G    &kp     W               &kp      B     &kp         H       &kp       SQT     &kp   SEMI  &kp   COMMA  &none
                                               &kp   TAB   &kp   SPACE  &mt LOWER ESC           &mt RAISE CAPS &http RA(BSPC) BSPC &http RA(DEL) DEL
                        >;
                };

                lower {
                        bindings = <
   &none &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &none
   &none &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &none
                                   &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise {
                        bindings = <
   &none &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &none
   &none &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &none
                         &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

                adjust {
                        bindings = <
   &none &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &none
   &none &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &none
                                   &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };
        };
};
